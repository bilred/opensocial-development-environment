#summary Testing as a Fragment Project in OSDE
#labels OSDE,Phase-Implementation,Phase-QA,EclipsePlug-in,OpenSocial

= Introduction =

This page describes how test files are organized in OSDE. The contents in this page is a general description on how to checkout, run tests, and request code review. If you are a developer and would like to actually write testing codes in OSDE. You should read this page first. Please refer to [http://code.google.com/p/opensocial-development-environment/wiki/OSDETestSpecs OSDE Test Specs] for more details and guidelines.


= Details =

Test files are separated from source code files in OSDE. They are extracted and put in a fragment project that relies on host project (or host plug-in). A fragment project in eclipse context is an extension to the host plug-in project. It contains its own config files but depends on the host project for library dependencies. The benefit of using fragment project is that we can extract things that are not relevant to production release into another place to form a clear separation and abstraction. The size of the trunk for host plug-in can also be reduced in this way.

The fragment test project should thus contain only testing codes but not host plug-in source codes.

In OSDE, source codes of host plug-in are put under [http://code.google.com/p/opensocial-development-environment/source/browse/#svn/trunk/jp.eisbahn.eclipse.plugins.osde svn/trunk/jp.eisbahn.eclipse.plugins.osde]
while test files for it are put under [http://code.google.com/p/opensocial-development-environment/source/browse/#svn/trunk/jp.eisbahn.eclipse.plugins.osde.test svn/trunk/jp.eisbahn.eclipse.plugins.osde.test].

In order to successfully run tests for OSDE, you must checkout both of them as two separate eclipse projects onto your local machine. And then run JUnit Test or JUnit Plug-in Test *in the test project*. You should be able to run tests without seeing compile errors by following this simple step.

If you are seeing errors like "unresolved type" in the test project. Try to keep only the host plug-in project and test project opened in eclipse and close all other un-related projects. Then make sure the errors are gone and run the tests again.

If you are still seeing compile errors in the test project. Make sure you didn't touch/modify the [http://code.google.com/p/opensocial-development-environment/source/browse/trunk/jp.eisbahn.eclipse.plugins.osde.test/META-INF/MANIFEST.MF manifest.mf file] in the test project. The manifest file is supposed to stay as it is and not frequently changed.

= Caveat For Developers =

Based on the above discussions, since the files are distributed into two diffrent places. *_Please carefully read the following section on how to conduct development and request code review under this context._*

= Development and Code Review for Testing Codes =

Developing testing codes in the fragment test project requires more attention since we have two separate projects in your workspace and also in the trunk. When requesting code review for your source files and their testing codes. You can either choose to:
 * *Temporarily put your test files together with your source codes and request ONE code review for them*. If you choose to do so, after you get LGTM, you have to move testing files to your local working copy of the fragment test project before committing them. With this option, you need only *ONE* branch from the trunk during development.
or
 * *Put your source files in host plug-in project and testing files in fragment test project*. In this way, you have to create *TWO* branches and file *TWO* code reviews since your files are now in two different projects/branches.

We recommend you choose the first option for ease of development. With this option, you don't have to branch/checkout two projects during development. You can later checkout the fragment test project directly from the trunk (without making another branch) and merge your testing codes into it once your changes pass code review.